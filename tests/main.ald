# # let name = "Kenny"
# # print(name.upperCase())
# let person = {
#     name: "Bob",
# }


# class A
#     @test = "Hello"
#     def @init(self, name)
#         self.name = name
#     end
#     def Test(self,*args,greeting,name)
#         print(args,greeting, name)
#     end
#     def toString(self)
#         return fm"Class %{self.name}"
#     end
# end

# let a = A("A name")
# a.Test("Hello", "World", name="Bob", greeting="Hi")
# #a.Test("Hi", "Kenny", "Bob", "Kenny")
# print(a.toString())





# class Car
#     def @init(self, manufacturer, weight, color, year)
#         self.manufacturer = manufacturer
#         self.weight = weight
#         self.color = color
#         self.year = year
#     end
#     def toString(self)
#         return fm"%{self.manufacturer} %{self.weight} %{self.color} %{self.year}"
#     end
# end

# let car1 = Car("Ford", "2000", "red", "2018")
# let car2 = Car("Honda", "1000", "blue", "2017")
# print(car1.toString())
# print(car2.toString())
# print(car1 == car2)

# def @Car(manufacturer, weight, color, year)
#     return fm"%{manufacturer} %{weight} %{color} %{year}"
# end

# # let car3 = @Car("Toyota", "2000", "red", "2018")
# # let car4 = @Car("Chevy", "1000", "blue", "2017")
# # print(car3)
# # print(car4)

# # Todo: work on varargs and keyword args
# def @join_sep(sep, *args, end_)
#     print(sep, args, end_)
#     let nums = ''
#     in args as arg:
#         nums += str(arg) + sep
#     end
#     return nums + end_
# end
# print(@join_sep('-', 1,2,3,4,5,6,7,8,9,10, end_ = '::'))

# let name, age = {
#     name: "Bob",
#     age: 20,
# }

# let d = dict(name = "Bob", age = 20, weight = "200")
# print(d)





let arr = [1,2,3,4,5,6,7,8,9,10]
print(arr)
let arr_map = arr.map(def(x) -> x * 2)
print(arr_map) # [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]
let arr_filter = arr.filter(def(x) -> x % 2 == 0)
print(arr_filter) # [2, 4, 6, 8, 10]
let arr_reduce = arr.reduce(def(x, y) -> x + y)
print(arr_reduce) # 55
let arr_reduce_2 = arr.reduce(def(x, y) -> x + y, 100)
print(arr_reduce_2) # 155
def @reducer(total, current_value, current_index)
    return total + current_value + current_index
end
let arr_reduce_3 = arr.reduce(@reducer)
print(arr_reduce_3) # 100
def @reducer_2(total, current_value, current_index, arr)
    return total + current_value + current_index + arr.length
end
let arr_reduce_4 = arr.reduce(@reducer_2, 100)
print(arr_reduce_4) # 300


import Vna from vna
import vna
let params = ['*rest','a', 'b']
let args = [1,2,3,4,5,6,7,8,9,10]
let vna = Vna(params, args).create()
print(vna)

let name = "Bob"
let person = {
    name: "Bob",
    age: 20,
    1: "Bob",
}

# freeze name
# name = "Kenny"
# print(name)
let ar = [{
    name: "Bob",
    age: 20,
}, {
    name: "Kenny",
    age: 20,
}]

class Person
end

import testlang
print(testlang.__@members__)