def @check_arg_type(arg,expected_type)
    match expected_type:
        case "string":
            if not isinstanceof(arg, String):
                raise TypeError("Expected string, got " + typeof(arg))
            end
        end
        case "number":
            if not isinstanceof(arg, Number):
                raise TypeError("Expected number, got " + typeof(arg))
            end
        end
        case "boolean":
            if not isinstanceof(arg, Boolean):
                raise TypeError("Expected boolean, got " + typeof(arg))
            end
        end
        case "list":
            if not isinstanceof(arg, List):
                raise TypeError("Expected list, got " + typeof(arg))
            end
        end
        case "dict":
            if not isinstanceof(arg, Object):
                raise TypeError("Expected dict, got " + typeof(arg))
            end
        end
        case "function":
            if not isinstanceof(arg, Function):
                raise TypeError("Expected function, got " + typeof(arg))
            end
        end
        case "object":
            if not isinstanceof(arg, Object):
                raise TypeError("Expected object, got " + typeof(arg))
            end
        end
        case "class":
            if not isinstanceof(arg, Class):
                raise TypeError("Expected class, got " + typeof(arg))
            end
        end
    end
end

def @read()
    let input = __@std_in_read()
    return input
end

def @readline()
    let input = __@std_in_readline()
    return input
end

def @readlines()
    let input = __@std_in_readlines()
    return input
end

def @write(output)
    @check_arg_type(output, "string")
    __@std_out_write(output)
end


class System
    def @init(self)
        self.argv = []
        self.stdin = {
            read: @read,
            readline: @readline,
            readlines: @readlines
        }
        self.stdout = {
            write: @write,
        }
        self.stderr = {
            write: @write,
        }
        # self.version = __@version()
        # self.platform = __@platform()
    end
    def exit(self, code=0)
        if code != 0:
            raise SystemExit(fm"Exiting with code: %{code}")
        end
    end
end


let path = __@sys_path()
let argv = __@sys_argv()

let version = __@sys_version()
let platform = __@sys_platform()

let stdin = {
    read: @read,
    readline: @readline,
    readlines: @readlines
}

let stdout = {
    write: @write,
}

let stderr = {
    write: @write,
}


# let env = __@sys_env()
