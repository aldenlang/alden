task @Factorial(n)
    if n == 0 then
        return 1
    else
        return n * @Factorial(n - 1)
    end
end


println(@Factorial(5))


task @UpdateUser(user)
 println("Your id is " + str(user.id))
 println(user.username)
end

object User
    id: 1
    username: "kenny001"
end

@UpdateUser(User)


task @HowmanyCoffeeDrank(coffeeDrank)
    for i = 0 to coffeeDrank then
        println("Coffee drank: " + str(i))
        # if last coffee drank, then print out the message
        if i == coffeeDrank - 1 then
            println("You drank all the coffee you need!")
        end
    end
end

@HowmanyCoffeeDrank(5)

# fibonacci series
task @FibonacciSeries()
    let prompt = "Fibonacci series: "
    let nterm = inputInt("Enter a number: ")
    let count = 0
    let n1 = 0
    let n2 = 1

    if nterm == 1 then
        println(n1)
    else
        println(n1)
        println(n2)
        while count < nterm - 2 then
            let n3 = n1 + n2
            println(n3)
            let n1 = n2
            let n2 = n3
            let count = count + 1
        end
    end
end


#@FibonacciSeries()


# first class function
task @Animal(getAnimal)
    let animal = getAnimal()
    println("The animal is " + animal)
end

task @getAnimal()
    return "Lion"
end

@Animal(@getAnimal)

final sayHello = task () -> task (name) -> println(fv"Hello {name}!")

# We can call the sayHello function using the following syntax:
sayHello()("David") # double parentheses or assign to a variable : let hello = sayHello() # call the function hello()


# sum all the numbers in a list
task @SumAll(list)
    let sum = 0
    for i = 0 to len(list) then
        let sum = sum + list|i
    end
    println("The sum is " + str(sum))
end

@SumAll([1, 2, 3, 4, 5])


task @countZeros(N)
    let n = 32
    let y = N >> 16
    if y != 0 then
       let  n = n - 16
       let N = y
    end
    let y = N >> 8
    if y != 0 then
        let n = n - 8
        let N = y
    end
    let y = N >> 4
    if y != 0 then
        let n = n - 4
        let N = y
    end
    let y = N >> 2
    if y != 0 then
        let n = n - 2
        let N = y
    end
    let y = N >> 1
    if y != 0 then
        return n - 2
    end
    return n - N
end
print(@countZeros(16))