# test for builtin_task str type
let name = "John"
let num = 10
line(1)
println(name + str(num))

# test for builtin_task int type
let num1 = "10"
let num2 = 20
line(2)
println(int(num1) + num2)

# test for builtin_task float type
let num3 = "10.5"
let num4 = 20.5
line(3)
println(float(num3) + num4)

# test for builtin_task bool type
let bool1 = "1 > 2"
let bool2 = false
line(4)
println(bool(bool1), bool(bool2))

# test for builtin_task list type
let list1 = "12345"
let list2 = "1,2,3,4,5"
let list3 = [1,2,3,4,5]
let list4 = 'abcde'
let list5 = 'a,b,c,d,e'
let list6 = ['a','b','c','d','e']
def @greet() 
   return "Hello World"
end
object Test
    name: "Test"
    is_test: true
end
line(5)
println(list(list1), list(list2), list(list3), list(list4), list(list5), list(list6), list(@greet()), list(Test))
let li = [1,2,3,4,5]
let li2 = [1,4,2,3,5]
let li3 = [1,2,3,4,5]
let li4 = [1,2,3,4,8]
# Need to work on comapring list
def @compareList(arr1, arr2)
    let res = ""
    let new_array = sorted(arr1)
    let new_array2 = sorted(arr2)
    if new_array == new_array2:
        let res = "The two lists are equal"
    else:
       let res = "The two lists are not equal"
    end
    return res
end

line(6)
println(@compareList(li, li2)) # should be equal
line(7)
println(@compareList(li3, li4)) # should be not equal


# test for builtin_task pair type
let pair1 = (1,2,3,4,5)
let pair2 = "a,b,c,d,e"
let pair3 = ['23','b','c','d','e']
let pair4 = "abcde"
object Test
    name: "Test"
    is_test: true
end
line(8)
println(pair(pair1), pair(pair2), pair(pair3), pair(pair4), pair(@greet()), pair(Test))



# test for object type
object Student
    name: "John"
    age: 21
end
line(9)
println(Student.name, Student.age)


# test for builtin_task object type
let obj1 = "John"
let obj2 = 21
line(10)
println("still need to work on builtin-def object type")
#println(Object(obj1), Object(obj2))

# test for function type
def @add(a, b)
    return a + b
end
line(11)
println(@add(1, 2))


# test for class type
class Car(name, color)
    def getName(self)
        println("Car name is " + self.name)
    end
    def getColor(self)
        println("Car color is " + self.color)
    end
end
let car = Car("BMW", "Black")
line(12)
car.getName()
car.getColor()


def @filterByname(arr, name)
    for i = 0 to len(arr) :
        if arr[i].name == name :
            return arr[i]
        end
    end
    return fm`Car %{name} not found`
end
# test for array index
object CarInventory
    cars: []
    addCar: def (name, color)
        object NewCar
            name: name
            color: color
        end
        append(CarInventory.cars, NewCar)
    end
    lookupCar: def (index) ->  CarInventory.cars[index]
    lookupCarByName: def (name) -> @filterByname(CarInventory.cars, name)
    size: def () ->  len(CarInventory.cars) # just assigning the value the size of the cars as len(CarInventory.cars) returns 0 but assigning the value as a def returns the size of the cars
end

let carInventory = CarInventory
carInventory.addCar("Audi", "Blue")
carInventory.addCar("Ford", "Red")

line(13)
println(carInventory.cars)
let car = carInventory.cars[0]
line(14)
println(car.name, car.color)
line(15)
println(carInventory.lookupCar(1))
line(16)
println(carInventory.lookupCarByName("test"))
line(17)
println(carInventory.lookupCarByName("Ford").name + " is " + carInventory.lookupCarByName("Ford").color)
line(18)
println(carInventory.size())

# test for in operator in object, dict, list, pair and string
object User
    name: "John"
    age: 21
    email: "john123@email.com"
    phone: "1234567890"
    username: "john123"
    password: "john123"
end
let dict_user = {
    "name": "John",
    "age": 21,
    "email": "",
}

let list_user = [
    "John",
    21
]

let pair_user = (
    "John",
    21
)

let str_user = "John"

line(19)
in User as (key,value):
    #println(fm`Key: %{key[0]}, Value: %{key[1]}`) # getting key and value from People object by just using the key 
    println(fm`(Object) Key: %{key}, Value: %{value}`) # getting key and value from People object by using the key and value
end
in dict_user as (key,value):
    #println(fm`Key: %{key[0]}, Value: %{key[1]}`) # getting key and value from People object by just using the key 
    println(fm`(Dict) Key: %{key}, Value: %{value}`) # getting key and value from People object by using the key and value
end
in list_user as (key):
    println(fm`(List) Key: %{key}`) # list object does not have value so we can only get the key
end
in pair_user as (key):
    println(fm`(Pair) Key: %{key}`) # pair object does not have value so we can only get the key
end
in str_user as (key):
    println(fm`(String) Key: %{key}`) # string object does not have value so we can only get the key
end


let numlist = [1, 2, 3, 4, 5]
let numpairs = (5,6,7,8,9)
let names = ["John", "Paul", "George", "Ringo"]
line(20)
in names as (name) :
    if name == "John" :
        println(fm`Hi %{name}`)
    end
    println(fm`%{name}`)
end

# test for rest operator
let students = ["John", "Paul", "George", "Ringo"]
let (first, *rest) = students
line(21)
println(fm`First: %{first}, Rest: %{rest}`)

# string methods test
let empty_string = ""
let empty_string_space = " "
let _str = "HelloxWorldHello"
let l_ist = ['Alden', 'is', 'an', 'awesome', 'programming', 'language']
let p_air = ('Alden', 'is', 'an', 'awesome', 'programming', 'language')

object StringObject
    name: "John"
    age: 21
    email: "john123@email.com"
end
line(22)
println(_str.upperCase())
line(23)
println(_str.lowerCase())
line(24)
println(_str.strip())
line(25)
println(_str.split("x"))
line(26)
println(_str.split("x", 2))
line(27)
println(empty_string_space.join(l_ist))
line(28)
println(empty_string_space.join(p_air))
line(29)
println(" is ".join(StringObject))
line(30)
let st = "Hi {name}!, You have {count} messages."
println(st.replace("{name}", "John").replace("{count}", "5"))
println(fm"%{_str} is %{_str.length} characters long")
let name = "John Doe"
let n = name.split()
println(fm"First name: %{n[0]}, Last name: %{n[1]}")
let value = []
in n as (name) :
    value.append(name)
    #append(value, name)
end
println(value)

# reverse string

# reverse string with built-in function
def @reverseString(s)
    return list(s).reverse().join
end


# reverse string with in-loop
def @reverseString2(s)
    let result  = ""
    in s as char :
        let result = char + result
    end
    return result
end

# reverse string with recursion
def @reverseString3(s)
    if s == "" :
        return ""
    else :
        return @reverseString3(s.substr(1)) + s.charAt(0)
    end
end

# reverse string with slicing
let reverseString4 = "Hello World"[::-1]

line(31)
println(@reverseString("freeCodeCamp"))
println(@reverseString2("freeCodeCamp"))
println(@reverseString3("freeCodeCamp"))
println(reverseString4)

# slicing
let _list = [1,2,3,4,5,6,7,8,9,10]
let _pair = (1,2,3,4,5,6,7,8,9,10)

line(32)
println(_list[1:4:1])
println(_pair[:2:1])
object User
    name1: "james"
    name2: "bond"
end
line(33)
println(User['name1'])
def @getUser(key)
    return User[key]
end


line(34)
println(@getUser("name1"))
let name = 'james'
println(name[::-1])


let (first, second, *rest) = [1,2,3,4,5,6,7,8,9,10]
line(35)
println(rest)

let user = {
    name: "John",
    age: 30,
    isAdmin: false,
    friends: ["Max", "Ann", "Kate"],
    cities: [
        { name: "New York", population: 800_000 },
        { name: "Moscow", population: 200_000 },
        { name: "London", population: 100_000 }
    ]
}

def @testDict(name, userdata) 
    println(userdata[name], userdata.name.upperCase(), userdata.cities[0]["name"], userdata.cities[2].population)
end
line(36)
@testDict("name", user)
let age = 18
let verified = if age >= 18 : true else : false
if verified:
    line(37)
    println("You are verified")
else :
    line(37)
    println("You are not verified")
end
let func = {
    sum: def (a,b)
        return a + b
    end
}

let car = {
    name: "Ford",
    color: "Black",
    getName: def () -> "My car is a " + car.name + " and it is " + car.color
}
line(38)
println(func.sum(1,2))
line(39)
println(car["getName"]())

let l = [1,2,3,4,5,6,7,8,9,10]
line(40)
println(l[1:4:1])
let food = " rice  beans chicken"
let l = [1,2,3]
let x = food.strip().join(in l as i: str(i))
line(41)
println(fm"I love %{x}")

# asssign property to def
def @test(a, b)
    println(fm"a = %{a} b = %{b}")
end
@test.call = def () -> println("I was just called")
@test.call()
class Person(fname, lname)
    def getName(self)
        println(fm"My name is %{self.fname}")
    end
end
def @getFullName(self)
    println(fm"My full name is %{self.fname} %{self.lname}")
end
let person = Person("David", "Michael")
# set getFullName as the def of person
person.getFullName = @getFullName
line(42)
person.getName()
person.getFullName()
# change fname and lname properties of person
person.fname = "Kehinde"
person.lname = "Akinsanya"
line(44)
person.getName()
person.getFullName()


# assignment operator
# addition assignment operator
let a = 20
let b = 30
final c = a + b
a += b # expected result is 50
let hello = "Hello"
let world = " World"
let hello_world = hello + world
println(hello_world)
let list = [1,2,3]
let pair = (1,2,3)
list += [4,5,6]
pair += (4,5,6)
line(45)
println(fm"a = %{a} b = %{b} list = %{list} pair = %{pair}") 
let num = 1
for i = 0 to 10:
    num += i
    println(fm"num = %{num}")
end

# subtraction assignment operator
let a = 20
let b = 30
final d = a - b

a -= b # expected result is -10
let hello = "Hello"
let world = " World"
#let hello_world = hello - world # expected result is error
let list = [1,2,3]
let pair = (1,2,3)
#list -= [4,5,6] # expected result is error
#pair -= (4,5,6) # expected result is error
line(46)
println(fm"d = %{d}")
println(fm"a = %{a} b = %{b} list = %{list} pair = %{pair}")

# multiplication assignment operator
let a = 20
let b = 30
final e = a * b
a *= b # expected result is 600
let hello = "Hello"
let world = " World"
#let hello_world = hello * world # expected result is error
let hello_world = hello * 2
let list = [1,2,3]
let pair = (1,2,3)
list *= 2 # expected result is error
pair *= 2 # expected result is error
line(47)
println(fm"num1 = %{num1}")
println(fm"e = %{e}")
println(fm"a = %{a} b = %{b} hello_world = %{hello_world} list = %{list} pair = %{pair}")

# division assignment operator
let a = 20
let b = 30
final f = a / b


a /= b # expected result is 0.6
let hello = "Hello"
let world = " World"
#let hello_world = hello / world # expected result is error
#let hello_world = hello / 2 
let list = [1,2,3]
let pair = (1,2,3)
#list /= [4,5,6] # expected result is error
#pair /= (4,5,6) # expected result is error
line(48)
println(fm"f = %{f}")
println(fm"a = %{a} b = %{b} hello_world = %{hello_world} list = %{list} pair = %{pair}")

# modulus assignment operator
let a = 20
let b = 30
final g = a % b


a %= b # expected result is 10
let hello = "Hello"
let world = " World"
#let hello_world = hello % world # expected result is error
#let hello_world = hello % 2
let list = [1,2,3]
let pair = (1,2,3)
#list %= [4,5,6] # expected result is error
#pair %= (4,5,6) # expected result is error
line(49)
println(fm"g = %{g}")
println(fm"a = %{a} b = %{b} hello_world = %{hello_world} list = %{list} pair = %{pair}")

# floor division assignment operator
let num1 = 15
let num2 = 2
num1 //= num2
line(50)
println(fm"num1 = %{num1}")

# equality operator
let list = [1,2,3,4]
let pair = (1,2,3,4)
list += [5]
pair += (5)
line(51)
println(fm"true or false1: %{list == [1,2,3,4,5]}") # true
println(fm"true or false2: %{pair == (1,2,3,4,5)}") # true
println(fm"true or false3: %{list == pair}") # false
println(fm"true or false4: %{pair == list}") # false
println(fm"true or false5: %{list < [1,2,3,4,5]}") # false
println(fm"true or false6: %{pair < (1,2,3,4,5)}") # false
println(fm"true or false7: %{list <= [1,2,3,4,5]}") # true
println(fm"true or false8: %{pair <= (1,2,3,4,5)}") # true
println(fm"true or false9: %{[1,2,3,4,5,6] > list}") # true
println(fm"true or false10: %{(1,2,3,4,5,6) > pair}") # true
println(fm"For List: %{list}, For Pair: %{pair}") # For List: [1, 2, 3, 4, 5], For Pair: (1, 2, 3, 4, 5)


line(52)
if a + b > 10:
    println("a + b > 10")
else:
    println("a + b <= 10")
end


let a = 20
let b = 30
let c = a++
let d = ++b
let e = a--
let f = int("40")
def @setnum() ->  2
a += @setnum() + 1 # expecting to 23
b -= @setnum() - 1 # expecting to 29
c /= @setnum() / 2 # expecting to 21.0
d *= @setnum() * 2 # expecting to 124
e %= @setnum() % 3 # expecting to 1
line(53)
println(fm"a = %{a}, b = %{b}, c = %{c}, d = %{d}, e = %{e}")
let hello = "Hello"
let world = "World"
hello += " " + world
println(hello)

let count = 0
for i = 0 to 10:
    for j = 0 to 10:
        for k = 0 to 10:
            if i != j and i != k and j != k:
                count += 1
            end
        end
    end
end
line(54)
println(fm"Count = %{count}") 

let number = 0
let sum = 0

while number <= 50:
    sum += number
    number += 1
end
line(55)
println(fm"Sum = %{sum}") # Sum = 1275


let david = def () -> "david"
let name = "Kenny"
# match name -> String
line(56)
match name:
    case "Bob":
        println("Hello David")   
    end
    case [1,2]:
        println("It's a list")  
    end
    case david():
        println("Hello Kenny")
    end
    default:
        println("This is string default")
    end  
end

let num = def () -> 1
# match num -> Int
line(57)
match num():
    case [1,2]:
        println("It's a list")   
    end
    case 1:
        println("It's a number")  
    end
    case "Kenny":
        println("Hello Kenny")   
    end
    default:
        println("This is num default")
    end  
end

let list = [1,2,3]
# match list -> List
line(58)
match list:
    case "string":
        println("It's a string")   
    end
    case [1,2,3]:
        println("It's a list")  
    end
    case "Kenny":
        println("Hello Kenny")   
    end
    default:
        println("This is list default")
    end  
end

let pair = (1,2)
# match pair -> Pair
line(59)
match pair:
    case (1,2,3):
        println("It's not a pair")
    end
    case (1,2):
        println("It's a pair")  
    end
    case "Kenny":
        println("Hello Kenny")   
    end
    default:
        println("This is pair default")
    end  
end

let dict = {name:"Bob", age:40, hobby: "Playing soccer"}
# match dict -> Dict
line(60)
match dict:
    default:
        println("This is dict default")
    end
    case "string":
        println("It's a string")   
    end
    case "Kenny":
        println("Hello Kenny")   
    end
    
    case {name:"Bob", age:40, hobby: "Playing soccer"}:
        println("It's a dict")  
    end  
end

object TestObject
    name: "Bob"    
end
println(fm"TestObject.name: %{TestObject}")
# match TestObject -> Object
line(61)
match TestObject:
    case "string":
        println("It's a string")   
    end
    case "Kenny":
        println("Hello Kenny")   
    end
    default:
        println("This is object default")
    end
    case TestObject:
        println("It's an object")  
    end    
end

let bool = true
# match bool -> Boolean
line(62)
match bool:
    case true:
        println("It's true")   
    end
    case false:
        println("It's false")  
    end
    case "Kenny":
        println("Hello Kenny")   
    end
    default:
        println("This is boolean default")
    end  
end


class TestMatch()
    def test()
    end
end

let test = TestMatch()
# match test -> TestMatch
line(63)
match test:
    case TestMatch():
        println("It's a TestMatch")   
    end
    case "Kenny":
        println("Hello Kenny")   
    end
    default:
        println("This is class default")
    end  
end


# match none -> none
line(64)
match none:
    case true:
        println("It's true")   
    end
    case false:
        println("It's false")  
    end
    case none:
        println("It's none")
    end
    default:
        println("This is Nonetype default")
    end  
end


# match default -> no match
line(65)
match none:
    case true:
        println("It's true")   
    end
    default:
        println("This is Nonetype default")
    end  
end

line(66)
let age = 20
let score = def () -> 22

if age == 20 and score() == 22:
    println("You are 20 years old and your score is 22")
else:
    println("You are not 20 years old or your score is not 22")
end

line(67)
let verfied = true
let eligible = false 
if verfied and eligible:
    println("You are eligible")
else:
    println("You are not eligible")
end

match verfied or eligible:
    case true:
        println("You are eligible because you are verified")
    end
    case false:
        println("You are not eligible because you are not verified")
    end
end
line(68)
# hasproperty check
let dict_user = {"name": "John","age": 21, "email": "","hobby": "Playing soccer",verfied: true, 2: "2"}
println("hasProperty for dict")
println(hasProperty(dict_user, "name"))  # true
println(hasProperty(dict_user, "age")) # true
println(hasProperty(dict_user, "email")) # true
println(hasProperty(dict_user, "hobby")) # true
println(hasProperty(dict_user, "verfied")) # true
println(hasProperty(dict_user, "has_key")) # true # check if dict has built-in method has_key
println(hasProperty(dict_user, "2")) # false
println(hasProperty(dict_user, "address")) # false
println("hasProperty for list")
let list_user = ["John", 21, "", "Playing soccer", true, 2]
#println(hasProperty(list_user, "name"))  # false


line(69)
# Multiplying all numbers in a list by 20
def @sum(a)
    return a * 10
end
println(list.map(def (x) -> x * 20))

line(70)
# Joining firstname and lastname of all users
let list_dict = [{
    firstname: "John",
    lastname: "Doe",
    age: 21,
    email: "john21@email.com",
    hobby: "Playing soccer",
    verfied: true
},{
    firstname: "Kenny",
    lastname: "Akinsanya",
    age: 23,
    email: "kenny23@email.com",
    hobby: "Coding",
    verfied: true
},
{
    firstname: "David",
    lastname: "Reynolds",
    age: 22,
    email: "david22@gmail.com",
    hobby: "Cooking",
    verfied: false,
}]
def @getFullName(item)
    return [item.firstname, item.lastname].join(" ")
end
println(list_dict.map(@getFullName))


line(71)
# Filtering only verified users
def @isverified(user)
    return  user.verfied
end
println(list_dict.filter(@isverified))  # [{firstname: 'John', lastname: 'Doe', age: 21, email: 'john21@email.com', hobby: 'Playing soccer', verfied: true}, {firstname: 'Kenny', lastname: 'Akinsanya', age: 23, email: 'kenny23@email.com', hobby: 'Coding', verfied: true}]


line(72)
# Filtering only words that have a length greater than 6
final words = ['spray', 'limit', 'elite', 'exuberant', 'destruction', 'present']
final result = words.filter(def (word) -> word.length > 6) # ['exuberant', 'destruction', 'present']
println(result)

line(73)
# Filtering out all small values
def @isBigEnough(value)
   return value >= 10
end
let filtered = [12, 5, 8, 130, 44].filter(@isBigEnough) # [12, 130, 44]
println(filtered)


line(74)
# Filtering out all prime numbers
def @isPrime(num) 
   for i = 2 to num:
        if num % i == 0:
            return false
        end
    end
    return num > 1
end

let array = [-3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13] 
println(array.filter(@isPrime)) # [2, 3, 5, 7, 11, 13]

line(75)
# Searching for a value in a list
let fruits = ['apple', 'banana', 'grapes', 'mango', 'orange']
println(fruits.find(def (fruit) -> fruit == 'mango')) # mango

line(76)
# Find num > 6
let list_nums = [5,12,8,130,44]
let found = list_nums.find(def (num) -> num > 6)
println(found) # 12

line(77)
# Find invetory item with name 'cherries'
final invetory = [
    {name: 'apples', quantity: 2},
    {name: 'bananas', quantity: 0},
    {name: 'oranges', quantity: 5},
    {name: 'cherries', quantity: 10},
    {name: 'grapes', quantity: 20}
]

def @isCherries(fruit)
    return fruit.name == 'cherries'
end

println(invetory.find(@isCherries)) # {name: 'cherries', quantity: 10}

line(78)
# delete operation
let dic = {name: "John", age: 21, email: "john@email.com", hobby: "Playing soccer", verfied: true}
object ObDic
    name: "John"
    age: 21
    email: "john@email.com"
    hobby: "Playing soccer"
    verfied: true
    type: "object"
end
class Dic(name, age, email, hobby, verfied)
    def __init(self)
        self.name = "ken"
    end
end
let dic_user = Dic("Matt", 21, "matt@email.com", "Playing soccer", true)
println(dic_user.name)
del dic_user
#println(dic_user["name"]) # error
# def @makeList(item, list=[])
#     list.append(item)
#     return list
# end

# let n = 0b1010
# #let m = 0o10
# #let o = 0x10
# line(35)
# println(n)

# line(36)
# println(@makeList("tissue"))
# println(@makeList("napkins"))
# println(@makeList("spoons"))