# let number = 1_000_000
# let number2 = 1_000_000_000
# let number3 = 1_000_000_000_000
# let number4 = 123_456_789_123_456_789
# println(number, number2, number3, number4)

# def @countHowManyZeros(num) 
#     let count = 0
#     let new_num = str(num)
#     let num_list = num.split("_")
#     println(num_list)
# end

# println(@countHowManyZeros(number))

# let DIGITS = '0123456789'
# let LETTERS = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'
# let SYMBOLS = '@_'
# let num = 123
# let num2 = 123.456
# let LETTERS_SYMBOLS = LETTERS + SYMBOLS
# let verfied = true
# class Test()









# end
# let list = [1, 2, 3, 4, 5, 6, 7, 8, '*', print, {name: 'rt'},[1,2,3], Test]
# let pair = (1, 2, 3, 4, 5, 6, 7, 8, 9, '*', print, {name: 'rt'}, true)
# println(fm"For String: %{'*' in LETTERS_SYMBOLS}")
# println(fm"For String2: %{'*' notin LETTERS_SYMBOLS}")
# let n = {name: '2rt'}
# let n_empty = {}
# object Prop
# end
# println(fm"This is a %{Prop}")
# #println(fm"For List: %{list.includes(n)}")
# #println(fm"For Pair: %{pair.includes(print)}")
# println(fm"For in List: %{Test in list}")
# println(fm"For notin List2: %{Test notin list}")
# println(fm"For in Pair: %{true in pair}")
# println(fm"For notin Pair2: %{true notin pair}")
# println(fm"For == Dict: %{n == n}")   # true  
# println(fm"For == Dict2: %{n == n_empty}")   # false
# println(fm"For != Dict3: %{n != n}")   # false
# println(fm"For != Dict4: %{n != n_empty}")   # true
# println(fm"For == Dict5: %{n_empty == n_empty}")   # true
# println(fm"For == Dict6: %{n_empty == n}")   # false
# println(fm"For != Dict7: %{n_empty != true}")   # true
# println(fm"For != Dict8: %{n != 2}")   # true
# println(fm"For == List: %{list == list}")   # true
# println(fm"For == List2: %{list < [1, 2, 3, 4, 5, 6, 7, 8, '*', print,n ,[1,2,3], Test,23, 45, 56]}")   # true
# println(fm"For <= List3: %{list <= [1, 2, 3, 4, 5, 6, 7, 8, '*', print,n ,[1,2,3], Test,23, 45, 56]}")   # true
# println(fm"For >= List4: %{list >= [1, 2, 3, 4, 5, 6, 7, 8, '*', print,n ,[1,2,3], Test,23, 45, 56]}")   # false
# println(fm"For == List5: %{list == [1, 2, 3, 4, 5, 6, 7, 8, '*', print,n ,[1,2,3], Test,23, 45, 56]}")   # false
# println(fm"For != List6: %{list != [1, 2, 3, 4, 5, 6, 7, 8, '*', print,n ,[1,2,3], Test,23, 45, 56]}")   # true
# println(fm"For != List7: %{list != list}")   # false
# println(fm"For == Pair: %{pair == pair}")   # true
# println(fm"For == Pair2: %{pair < (1, 2, 3, 4, 5, 6, 7, 8, 9, '*', print,n ,true, [1,2,3], Test,23, 45, 56)}")   # true
# println(fm"For <= Pair3: %{pair <= (1, 2, 3, 4, 5, 6, 7, 8, 9, '*', print,n ,true, [1,2,3], Test,23, 45, 56)}")   # true
# println(fm"For >= Pair4: %{pair >= (1, 2, 3, 4, 5, 6, 7, 8, 9, '*', print,n ,true, [1,2,3], Test,23, 45, 56)}")   # false
# println(fm"For is Boolean: %{true is true}")   # true  
# println(fm"For is Boolean2: %{false is false}")  # true
# println(fm"For is Boolean3: %{false is not true}") # true
# println(fm"For is Boolean4: %{true is not false}") # true
# println(fm"For is Boolean5: %{false is not false}")  # false
# println(fm"For is String: %{'rt' is 'rt'}")  # true
# println(fm"For is String2: %{'rt' is not 'rt2'}")  # true
# println(fm"For is String3: %{'rt' is not 'rt'}")  # false

# def @greet(name, age, hobby="Programming")
#     println(fm"Hello, %{name} you are %{age} years old and you like %{hobby}")
# end
# def @greet2(prop)
#     let name = prop.name
#     let age = prop.age
#     let hobby = prop.hobby
#      println(fm"Hello, %{name} you are %{age} years old and you like %{hobby}")
# end

# @greet("David", 23)
# @greet("Kenny", 25, "Eating Rice")
# @greet2({name:"Bob", age:40, hobby: "Playing soccer"}) # can be used to simulate named arguments
line(67)
let list = [1,2,3]
let list2 = [4,5,6]
let pair = (1,2,3)
let pair2 = (4,5,6)
let dict = {name: 'Kenny'}
let dict2 = {age: 23}
object Address
    street: '123 Main St'
end
class Employee(title, id)
end
let emp = Employee('Manager', '123')
let [a,*rest] = list
let (c,*rest2) = pair
println(fm"a: %{a}, rest: %{rest}")
println(fm"c: %{c}, rest2: %{rest2}")
let new_list = **[list,pair2,7,8,9] # spread operator, syntax sugar for + operator and list.extend(list2)
let new_pair = **(pair,pair2,7,8,9) # spread operator, syntax sugar for + operator and pair.extend(pair2)
let new_dict = dict |= dict2 |= Address |= emp # spread operator, syntax sugar for + operator and dict.update(dict2)
println(new_dict.street, new_dict.age, new_dict.name)
println(fm"new_list: %{new_list}, typeof new_list: %{typeof(new_list)}, length: %{len(new_list)}")
println(fm"new_pair: %{new_pair}, typeof new_pair: %{typeof(new_pair)}, length: %{len(new_pair)}")
println(fm"new_dict: %{new_dict}, typeof new_dict: %{typeof(new_dict)}, length: %{len(new_dict)}")

line(68)
# instance check
let _int = 1
let _float = 1.0
let _str = "1"
let _bool = true
let _bool2 = false
let _none = none
let _list = [1,2,3]
let _pair = (1,2,3)
let _dict = {name: 'Kenny'}
let _emp = Employee('Manager', '123')
let _address = Address
def @test() -> "testing"
let _builtin_func = print
let _builtin_method = _str.upperCase
println(fm"_int is int: %{isinstanceof(_int, Number)}")
println(fm"_float is float: %{isinstanceof(_float, Number)}")
println(fm"_str is string: %{isinstanceof(_str, String)}")
println(fm"_bool is bool: %{isinstanceof(_bool, Boolean)}")
println(fm"_bool2 is bool: %{isinstanceof(_bool2, Boolean)}")
println(fm"_none is none: %{isinstanceof(_none, NoneType)}")
println(fm"_list is list: %{isinstanceof(_list, List)}")
println(fm"_pair is pair: %{isinstanceof(_pair, Pair)}")
println(fm"_dict is dict: %{isinstanceof(_dict, Dict)}")
println(fm"_address is Address: %{isinstanceof(_address, Object)}")
println(fm"_emp is Employee: %{isinstanceof(_emp, Class)}")
println(fm"_builtin_func is function: %{isinstanceof(@test, Function)}")
println(fm"_builtin_method is method: %{isinstanceof(_builtin_func, BuiltInFunction)}")
println(fm"_builtin_method is method: %{isinstanceof(_builtin_method, BuiltInMethod)}")

