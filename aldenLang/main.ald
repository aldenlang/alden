# # let name = "Kenny"
# # println(name.upperCase())
# let person = {
#     name: "Bob",
# }


# class A
#     @test = "Hello"
#     def @init(self, name)
#         self.name = name
#     end
#     def Test(self,*args,greeting,name)
#         println(args,greeting, name)
#     end
#     def toString(self)
#         return fm"Class %{self.name}"
#     end
# end

# let a = A("A name")
# a.Test("Hello", "World", name="Bob", greeting="Hi")
# #a.Test("Hi", "Kenny", "Bob", "Kenny")
# println(a.toString())





class Car
    def @init(self, manufacturer, weight, color, year)
        self.manufacturer = manufacturer
        self.weight = weight
        self.color = color
        self.year = year
    end
    def toString(self)
        return fm"%{self.manufacturer} %{self.weight} %{self.color} %{self.year}"
    end
end

let car1 = Car("Ford", "2000", "red", "2018")
let car2 = Car("Honda", "1000", "blue", "2017")
println(car1.toString())
println(car2.toString())
println(car1 == car2)

def @Car(manufacturer, weight, color, year)
    return fm"%{manufacturer} %{weight} %{color} %{year}"
end

# let car3 = @Car("Toyota", "2000", "red", "2018")
# let car4 = @Car("Chevy", "1000", "blue", "2017")
# println(car3)
# println(car4)

# Todo: work on varargs and keyword args
def @join_sep(sep, *args, end_)
    println(sep, args, end_)
    let nums = ''
    in args as arg:
        nums += str(arg) + sep
    end
    return nums + end_
end
println(@join_sep('-', 1,2,3,4,5,6,7,8,9,10, end_ = '::'))

let name, age = {
    name: "Bob",
    age: 20,
}

let d = dict(name = "Bob", age = 20, weight = "200")
println(d)

final modes = ["a", "w", "w+", "r", "r+", "a+"]

def @handle_mode(mode)
    if not modes.includes(mode): 
        raise ValueError(fm"Invalid mode: '%{mode}'")
    end
    return mode
end

def @check_closed(self)
    if self.closed:
        raise ValueError(fm"I/O operation on closed file")
    end
end

def @check_readable(self)
    @check_closed(self)
    if not self.readable:
        raise IOError(fm"File not open for reading")
    end
end

def @open(file, mode)
    mode = @handle_mode(mode)
    attempt:
        return @File(file=file, mode=mode)
    catch FileNotFoundError as e:
        raise FileNotFoundError(fm"File not found: '%{file}'")
    end
end

class File
    def @init(self, name, mode)
        self.name = name
        self.mode = mode
        self.closed = false
        self.readable = mode.includes("r")
        self.lineno = 0
        self.file = @open(self.name, self.mode)
    end
    def toString(self)
        return fm"%{self.name} %{self.mode}"
    end
    def read(self)
        @check_readable(self)
        return self.file.read()
    end
    def write(self, data)
        @check_closed(self)
        if self.mode == "w":
            self.file.write(data)
        elif self.mode == "w+":
            self.file.write(data)
            self.file.seek(0)
        elif self.mode == "r":
            raise ValueError(fm"%{self.name} is not writable")
        elif self.mode == "r+":
            self.file.write(data)
            self.file.seek(0)
        elif self.mode == "a":
            self.file.write(data)
        elif self.mode == "a+":
            self.file.write(data)
            self.file.seek(0)
        end
    end
    def close(self)
        self.file.close()
        self.closed = true
    end
end

let file = File("write.ald", "w")
println(file.closed)
#println(file.read())
#file.close()
println(file.write("Hello World"))
file.close()
println(file.closed)