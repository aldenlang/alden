# # let number = 1_000_000
# # let number2 = 1_000_000_000
# # let number3 = 1_000_000_000_000
# # let number4 = 123_456_789_123_456_789
# # println(number, number2, number3, number4)

# # def @countHowManyZeros(num) 
# #     let count = 0
# #     let new_num = str(num)
# #     let num_list = num.split("_")
# #     println(num_list)
# # end

# # println(@countHowManyZeros(number))

# # let DIGITS = '0123456789'
# # let LETTERS = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'
# # let SYMBOLS = '@_'
# # let num = 123
# # let num2 = 123.456
# # let LETTERS_SYMBOLS = LETTERS + SYMBOLS
# # let verfied = true
# # class Test()









# # end
# # let list = [1, 2, 3, 4, 5, 6, 7, 8, '*', print, {name: 'rt'},[1,2,3], Test]
# # let pair = (1, 2, 3, 4, 5, 6, 7, 8, 9, '*', print, {name: 'rt'}, true)
# # println(fm"For String: %{'*' in LETTERS_SYMBOLS}")
# # println(fm"For String2: %{'*' notin LETTERS_SYMBOLS}")
# # let n = {name: '2rt'}
# # let n_empty = {}
# # object Prop
# # end
# # println(fm"This is a %{Prop}")
# # #println(fm"For List: %{list.includes(n)}")
# # #println(fm"For Pair: %{pair.includes(print)}")
# # println(fm"For in List: %{Test in list}")
# # println(fm"For notin List2: %{Test notin list}")
# # println(fm"For in Pair: %{true in pair}")
# # println(fm"For notin Pair2: %{true notin pair}")
# # println(fm"For == Dict: %{n == n}")   # true  
# # println(fm"For == Dict2: %{n == n_empty}")   # false
# # println(fm"For != Dict3: %{n != n}")   # false
# # println(fm"For != Dict4: %{n != n_empty}")   # true
# # println(fm"For == Dict5: %{n_empty == n_empty}")   # true
# # println(fm"For == Dict6: %{n_empty == n}")   # false
# # println(fm"For != Dict7: %{n_empty != true}")   # true
# # println(fm"For != Dict8: %{n != 2}")   # true
# # println(fm"For == List: %{list == list}")   # true
# # println(fm"For == List2: %{list < [1, 2, 3, 4, 5, 6, 7, 8, '*', print,n ,[1,2,3], Test,23, 45, 56]}")   # true
# # println(fm"For <= List3: %{list <= [1, 2, 3, 4, 5, 6, 7, 8, '*', print,n ,[1,2,3], Test,23, 45, 56]}")   # true
# # println(fm"For >= List4: %{list >= [1, 2, 3, 4, 5, 6, 7, 8, '*', print,n ,[1,2,3], Test,23, 45, 56]}")   # false
# # println(fm"For == List5: %{list == [1, 2, 3, 4, 5, 6, 7, 8, '*', print,n ,[1,2,3], Test,23, 45, 56]}")   # false
# # println(fm"For != List6: %{list != [1, 2, 3, 4, 5, 6, 7, 8, '*', print,n ,[1,2,3], Test,23, 45, 56]}")   # true
# # println(fm"For != List7: %{list != list}")   # false
# # println(fm"For == Pair: %{pair == pair}")   # true
# # println(fm"For == Pair2: %{pair < (1, 2, 3, 4, 5, 6, 7, 8, 9, '*', print,n ,true, [1,2,3], Test,23, 45, 56)}")   # true
# # println(fm"For <= Pair3: %{pair <= (1, 2, 3, 4, 5, 6, 7, 8, 9, '*', print,n ,true, [1,2,3], Test,23, 45, 56)}")   # true
# # println(fm"For >= Pair4: %{pair >= (1, 2, 3, 4, 5, 6, 7, 8, 9, '*', print,n ,true, [1,2,3], Test,23, 45, 56)}")   # false
# # println(fm"For is Boolean: %{true is true}")   # true  
# # println(fm"For is Boolean2: %{false is false}")  # true
# # println(fm"For is Boolean3: %{false is not true}") # true
# # println(fm"For is Boolean4: %{true is not false}") # true
# # println(fm"For is Boolean5: %{false is not false}")  # false
# # println(fm"For is String: %{'rt' is 'rt'}")  # true
# # println(fm"For is String2: %{'rt' is not 'rt2'}")  # true
# # println(fm"For is String3: %{'rt' is not 'rt'}")  # false

# # def @greet(name, age, hobby="Programming")
# #     println(fm"Hello, %{name} you are %{age} years old and you like %{hobby}")
# # end
# # def @greet2(prop)
# #     let name = prop.name
# #     let age = prop.age
# #     let hobby = prop.hobby
# #      println(fm"Hello, %{name} you are %{age} years old and you like %{hobby}")
# # end

# # @greet("David", 23)
# # @greet("Kenny", 25, "Eating Rice")
# # @greet2({name:"Bob", age:40, hobby: "Playing soccer"}) # can be used to simulate named arguments


# # line(67)
# # let list = [1,2,3]
# # let list2 = [4,5,6]
# # let pair = (1,2,3)
# # let pair2 = (4,5,6)
# # let dict = {name: 'Kenny'}
# # let dict2 = {age: 23}
# # object Address
# #     street: '123 Main St'
# # end
# # class Employee(title, id)
# # end
# # let emp = Employee('Manager', '123')
# # let [a,*rest] = list
# # let (c,*rest2) = pair
# # println(fm"a: %{a}, rest: %{rest}")
# # println(fm"c: %{c}, rest2: %{rest2}")
# # let new_list = **[list,pair2,7,8,9] # spread operator, syntax sugar for + operator and list.extend(list2)
# # let new_pair = **(pair,pair2,7,8,9) # spread operator, syntax sugar for + operator and pair.extend(pair2)
# # let new_dict = dict |= dict2 |= Address |= emp # spread operator, syntax sugar for + operator and dict.update(dict2)
# # println(new_dict.street, new_dict.age, new_dict.name)
# # println(fm"new_list: %{new_list}, typeof new_list: %{typeof(new_list)}, length: %{len(new_list)}")
# # println(fm"new_pair: %{new_pair}, typeof new_pair: %{typeof(new_pair)}, length: %{len(new_pair)}")
# # println(fm"new_dict: %{new_dict}, typeof new_dict: %{typeof(new_dict)}, length: %{len(new_dict)}")

# # line(68)
# # # instance check
# # let _int = 1
# # let _float = 1.0
# # let _str = "1"
# # let _bool = true
# # let _bool2 = false
# # let _none = none
# # let _list = [1,2,3]
# # let _pair = (1,2,3)
# # let _dict = {name: 'Kenny'}
# # let _emp = Employee('Manager', '123')
# # let _address = Address
# # def @test() -> "testing"
# # let _builtin_func = print
# # let _builtin_method = _str.upperCase
# # println(fm"_int is int: %{isinstanceof(_int, Number)}")
# # println(fm"_float is float: %{isinstanceof(_float, Number)}")
# # println(fm"_str is string: %{isinstanceof(_str, String)}")
# # println(fm"_bool is bool: %{isinstanceof(_bool, Boolean)}")
# # println(fm"_bool2 is bool: %{isinstanceof(_bool2, Boolean)}")
# # println(fm"_none is none: %{isinstanceof(_none, NoneType)}")
# # println(fm"_list is list: %{isinstanceof(_list, List)}")
# # println(fm"_pair is pair: %{isinstanceof(_pair, Pair)}")
# # println(fm"_dict is dict: %{isinstanceof(_dict, Dict)}")
# # println(fm"_address is Address: %{isinstanceof(_address, Object)}")
# # println(fm"_emp is Employee: %{isinstanceof(_emp, Class)}")
# # println(fm"@test is function: %{isinstanceof(@test, Function)}")
# # println(fm"_builtin_function is builtin_function: %{isinstanceof(_builtin_func, BuiltInFunction)}")
# # println(fm"_builtin_method is builtin_method: %{isinstanceof(_builtin_method, BuiltInMethod)}")
# # # type check
# # println(fm"typeof _int: %{typeof(_int)} is int")
# # println(fm"typeof _float: %{typeof(_float) }is float")
# # println(fm"typeof _str: %{typeof(_str) } is string")
# # println(fm"typeof _bool: %{typeof(_bool) } is boolean")
# # println(fm"typeof _bool2: %{typeof(_bool2) } is boolean")
# # println(fm"typeof _none: %{typeof(_none) } is none")
# # println(fm"typeof _list: %{typeof(_list) } is list")
# # println(fm"typeof _pair: %{typeof(_pair) } is pair")
# # println(fm"typeof _dict: %{typeof(_dict) } is dict")
# # println(fm"typeof _emp: %{typeof(_emp) } is class")
# # println(fm"typeof _address: %{typeof(_address) } is object")
# # println(fm"typeof @test: %{typeof(@test) } is function")
# # println(fm"typeof _builtin_func: %{typeof(_builtin_func) } is builtin_function")
# # println(fm"typeof _builtin_method: %{typeof(_builtin_method) }is builtin_method")


# let name = "Kenny"
# def @greet(name)
#     return fm"Hello, %{name}"
# end
# # let age = 23
# # let hobby = "Playing soccer"

# # attempt:
# #     println(fm"Hello, %{@dgreet(name)}")
# # catch Exception as e:
# #     println(fm"Exception: %{e}")
# # end
# # let user = "{name: 'Kenny', age: 23, hobby: 'Playing soccer'}"
# # def getUser(user)
# #     if not isinstanceof(user, Dict):
# #         raise Exception(fm"Expected Dict, got '%{typeof(name)}'")
# #     end
# #     return fm"Hello, %{user.name} you are %{user.age} years old and you like %{user.hobby}"
# # end



# # Exception.name = "NameError"
# # Exception.message = fm"%{Exception.name}: %{name} is not defined"
# # println(Exception.message)
# let pair = ("a", "e", "i", "o", "u", 'e')
# let list = [1,2,3,4,5,6,7,8,9,10]
# let dict = {name: 'Kenny', age: 23, hobby: 'Playing soccer'}
# let str = "Hello, World!"
# class Employee(title, id)
# end
# #println(fm'The index of "o" is %{str.findIndex("o")}')
# #println(fm'The index of "o" is %{str.find("o")}')

# #println(not String == String)
# # Operator check
# println(fm"'not' operator on true: %{not(true)}")  # false
# println(fm"'not' operator on false: %{not(false)}") # true
# println(fm"'not' operator on none: %{not(none)}")  # true
# println(fm"'not' operator on int: %{not(1)}")     # false
# println(fm"'not' operator on float: %{not(1.0)}") # false
# println(fm"'not' operator on string: %{not('')}") # true
# println(fm"'not' operator on list: %{not([])}")  # false
# println(fm"'not' operator on pair: %{not(pair)}") # false
# println(fm"'not' operator on dict: %{not(dict)}") # false
# println(fm"'not' operator on class: %{not(Employee)}") # false
# println(fm"'not' operator on function: %{not(@greet)}") # false
# println(fm"'not' operator on builtin_function: %{not(print)}") # false
# println(fm"'not' operator on builtin_class: %{not(Exception)}") # false
# println(fm"'not' operator on builtin_method: %{not(str.upperCase)}") # false
# println(fm"'not' operator on builtin_type: %{not(String)}") # false
# println(fm"'not' operator on none: %{not(none)}") # false
# println(not "" == "")
# let dict_user = {"name": "John","age": 21,"email": "","hobby": "Playing soccer",verfied: true, 2: "2"}
# # list.map = def @map(list, func)
# #     if not isinstanceof(list, List):
# #         raise Exception(fm"Expected List, got '%{typeof(list)}'")
# #     end
# #     if not isinstanceof(func, Function):
# #         raise Exception(fm"Expected Function, got '%{typeof(func)}'")
# #     end
# #     let result = []
# #     in list as item:
# #         result.append(func(item))
# #     end
# #     return result
# # end

# # list.filter = def @filter(list, func)
# #     if not isinstanceof(list, List):
# #         raise Exception(fm"Expected List, got '%{typeof(list)}'")
# #     end
# #     if not isinstanceof(func, Function):
# #         raise Exception(fm"Expected Function, got '%{typeof(func)}'")
# #     end
# #     let result = []
# #     in list as item:
# #         if func(item):
# #             result.append(item)
# #         end
# #     end
# #     return result
# # end


# line(69)
# # Multiplying all numbers in a list by 20
# def @sum(a)
#     return a * 10
# end
# println(list.map(def (x) -> x * 20))

# line(70)
# # Joining firstname and lastname of all users
# let list_dict = [{
#     firstname: "John",
#     lastname: "Doe",
#     age: 21,
#     email: "john21@email.com",
#     hobby: "Playing soccer",
#     verfied: true
# },{
#     firstname: "Kenny",
#     lastname: "Akinsanya",
#     age: 23,
#     email: "kenny23@email.com",
#     hobby: "Coding",
#     verfied: true
# },
# {
#     firstname: "David",
#     lastname: "Reynolds",
#     age: 22,
#     email: "david22@gmail.com",
#     hobby: "Cooking",
#     verfied: false,
# }]
# def @getFullName(item)
#     return [item.firstname, item.lastname].join(" ")
# end
# println(list_dict.map(@getFullName))


# line(71)
# # Filtering only verified users
# def @isverified(user)
#     return  user.verfied
# end
# println(list_dict.filter(@isverified))


# line(72)
# # Filtering only words that have a length greater than 6
# final words = ['spray', 'limit', 'elite', 'exuberant', 'destruction', 'present']
# final result = words.filter(def (word) -> word.length > 6) # ['exuberant', 'destruction', 'present']
# println(result)

# line(73)
# # Filtering out all small values
# def @isBigEnough(value)
#    return value >= 10
# end
# let filtered = [12, 5, 8, 130, 44].filter(@isBigEnough) # [12, 130, 44]
# println(filtered)


# line(74)
# # Filtering out all prime numbers
# def @isPrime(num) 
#    for i = 2 to num:
#         if num % i == 0:
#             return false
#         end
#     end
#     return num > 1
# end
# let array = [-3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13] 
# println(array.filter(@isPrime)) # [2, 3, 5, 7, 11, 13]


# line(75)
# # Searching for a value in a list
# let fruits = ['apple', 'banana', 'grapes', 's', 'orange']

# println(fruits.find(def (fruit) -> fruit == 'mango')) # mango

# let list_nums = [5,12,8,130,44]
# let found = list_nums.find(def (num) -> num > 6)
# println(found) # 12

# final invetory = [
#     {name: 'apples', quantity: 2},
#     {name: 'bananas', quantity: 0},
#     {name: 'oranges', quantity: 5},
#     {name: 'cherries', quantity: 10},
#     {name: 'grapes', quantity: 20}
# ]

# def @isCherries(fruit)
#     return fruit.name == 'cherries'
# end

# println(invetory.find(@isCherries)) # {name: 'cherries', quantity: 10}

# # find all prime numbers

# # hasproperty check # still working on this
# # println(hasProperty(dict_user, "name"))
# # println(hasProperty(dict_user, "age"))
# # println(hasProperty(dict_user, "email"))
# # println(hasProperty(dict_user, "hobby"))
# # println(hasProperty(dict_user, "verfied"))
# # println(hasProperty(dict_user, "has_key"))
# # println(list.map(list, @sum))
# # let verfied_list = list.filter(list_dict, @isverified)
# # in verfied_list as user:
# #     println(fm"%{user.name} is verified")
# # end
#  #println(fm"Hello, %{dict_user.nadme}")
#  def @test2()
#     raise Exception
# end
#  def @test()
#     @test2()
# end
# let dic = {"name": "John","age": 21,"email": "","hobby": "Playing soccer",verfied: true, 2: "2"}
# def @greet2(name)
#     @test()
# end
# #println(@greet2('nasme'))
# let fruits = ['apple', 'banana', 'grapes', 'mango', 'orange']
# class Test()
# end

class Person(fname, lname)
    def printname(self)
      println(self.fname, self.lname)
    end
    def __repr(self)
        return fm"Person(%{self.fname}, %{self.lname})"
    end
end

class Student() ~ Person
    def __init(self)
        self.age = 21
    end
    def printname(self)
      println(fm"Hello, %{self.fname} %{self.lname}, you are %{self.age} years old")
    end 
end

let p = Person("John", "Doe")
let s1 = Student("John", "Doe")
p.printname()
s1.printname()
object Name
    id: 2
end
let l = [1,2,3,4,5,6,7,8,9,10]
l += {'name': 'Kenny'}
println(l)

let dic = {num1: 1, num2: 2, num3: 3}

let count = 0
# let x = range(1, 10)
# in x as i:
#     println(fm"I is %{i}")
# end
#println(range(1,10))
class Employee(name, age)
    @employee_db_id = "iobherbndfiuyirre" # This is a static variable that is shared by all instances of the class
    url = "http://www.google.com"
    def create(self, name, age)
        self.name = name
        self.age = age
    end
    def __repr(self)
        return fm"Employee(%{self.name}, %{self.age})"
    end
    def get_employee_db_id(self)
        return self.@employee_db_id
    end
    def get_url(self)
        return self.url
    end
end


let employee = Employee
#employee.@employee_db_id = "changed" # This is a static variable, so a warning will be shown
employee.url = "http://www.new.com" # this is not a static variable, so value will be changed
