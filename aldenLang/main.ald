# let number = 1_000_000
# let number2 = 1_000_000_000
# let number3 = 1_000_000_000_000
# let number4 = 123_456_789_123_456_789
# println(number, number2, number3, number4)

# def @countHowManyZeros(num) 
#     let count = 0
#     let new_num = str(num)
#     let num_list = num.split("_")
#     println(num_list)
# end

# println(@countHowManyZeros(number))

# let DIGITS = '0123456789'
# let LETTERS = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'
# let SYMBOLS = '@_'
# let num = 123
# let num2 = 123.456
# let LETTERS_SYMBOLS = LETTERS + SYMBOLS
# let verfied = true
# class Test()









# end
# let list = [1, 2, 3, 4, 5, 6, 7, 8, '*', print, {name: 'rt'},[1,2,3], Test]
# let pair = (1, 2, 3, 4, 5, 6, 7, 8, 9, '*', print, {name: 'rt'}, true)
# println(fm"For String: %{'*' in LETTERS_SYMBOLS}")
# println(fm"For String2: %{'*' notin LETTERS_SYMBOLS}")
# let n = {name: '2rt'}
# let n_empty = {}
# object Prop
# end
# println(fm"This is a %{Prop}")
# #println(fm"For List: %{list.includes(n)}")
# #println(fm"For Pair: %{pair.includes(print)}")
# println(fm"For in List: %{Test in list}")
# println(fm"For notin List2: %{Test notin list}")
# println(fm"For in Pair: %{true in pair}")
# println(fm"For notin Pair2: %{true notin pair}")
# println(fm"For == Dict: %{n == n}")   # true  
# println(fm"For == Dict2: %{n == n_empty}")   # false
# println(fm"For != Dict3: %{n != n}")   # false
# println(fm"For != Dict4: %{n != n_empty}")   # true
# println(fm"For == Dict5: %{n_empty == n_empty}")   # true
# println(fm"For == Dict6: %{n_empty == n}")   # false
# println(fm"For != Dict7: %{n_empty != true}")   # true
# println(fm"For != Dict8: %{n != 2}")   # true
# println(fm"For == List: %{list == list}")   # true
# println(fm"For == List2: %{list < [1, 2, 3, 4, 5, 6, 7, 8, '*', print,n ,[1,2,3], Test,23, 45, 56]}")   # true
# println(fm"For <= List3: %{list <= [1, 2, 3, 4, 5, 6, 7, 8, '*', print,n ,[1,2,3], Test,23, 45, 56]}")   # true
# println(fm"For >= List4: %{list >= [1, 2, 3, 4, 5, 6, 7, 8, '*', print,n ,[1,2,3], Test,23, 45, 56]}")   # false
# println(fm"For == List5: %{list == [1, 2, 3, 4, 5, 6, 7, 8, '*', print,n ,[1,2,3], Test,23, 45, 56]}")   # false
# println(fm"For != List6: %{list != [1, 2, 3, 4, 5, 6, 7, 8, '*', print,n ,[1,2,3], Test,23, 45, 56]}")   # true
# println(fm"For != List7: %{list != list}")   # false
# println(fm"For == Pair: %{pair == pair}")   # true
# println(fm"For == Pair2: %{pair < (1, 2, 3, 4, 5, 6, 7, 8, 9, '*', print,n ,true, [1,2,3], Test,23, 45, 56)}")   # true
# println(fm"For <= Pair3: %{pair <= (1, 2, 3, 4, 5, 6, 7, 8, 9, '*', print,n ,true, [1,2,3], Test,23, 45, 56)}")   # true
# println(fm"For >= Pair4: %{pair >= (1, 2, 3, 4, 5, 6, 7, 8, 9, '*', print,n ,true, [1,2,3], Test,23, 45, 56)}")   # false
# println(fm"For is Boolean: %{true is true}")   # true  
# println(fm"For is Boolean2: %{false is false}")  # true
# println(fm"For is Boolean3: %{false is not true}") # true
# println(fm"For is Boolean4: %{true is not false}") # true
# println(fm"For is Boolean5: %{false is not false}")  # false
# println(fm"For is String: %{'rt' is 'rt'}")  # true
# println(fm"For is String2: %{'rt' is not 'rt2'}")  # true
# println(fm"For is String3: %{'rt' is not 'rt'}")  # false

# def @greet(name, age, hobby="Programming")
#     println(fm"Hello, %{name} you are %{age} years old and you like %{hobby}")
# end
# def @greet2(prop)
#     let name = prop.name
#     let age = prop.age
#     let hobby = prop.hobby
#      println(fm"Hello, %{name} you are %{age} years old and you like %{hobby}")
# end

# @greet("David", 23)
# @greet("Kenny", 25, "Eating Rice")
# @greet2({name:"Bob", age:40, hobby: "Playing soccer"}) # can be used to simulate named arguments

let num = 16
for i = 0 to num:
    if i % 3 == 0 and i % 5 == 0 :
        println("FizzBuzz")
    elif i % 3 == 0:
        println("Fizz")
    elif i % 5 == 0:
        println("Buzz")
    else:
        println(i)
    end
end

def @map(arr, tsk)
    let res = []
    for i = 0 to len(arr) - 1:
        append(res, tsk(arr[i]))
    end
    return res
end

def @filter(arr, tsk)
    let res = []
    for i = 0 to len(arr) - 1:
        if tsk(arr[i]) :
            append(res, arr[i])
        end
    end
    return res
end


# Map and Filter
let arr = [1,2,4,9]

# Map
let map = @map(arr, def (x) -> x * 2)
println(map)

# Filter
let filter = @filter(arr, def (x) -> x % 2 == 0)
println(filter)
let a = 20
let b = 30

if a + b > 10:
    println("a + b > 10")
else:
    println("a + b <= 10")
end
println(str("Hello ") + str("World"))

let c = a++
let d = ++b
let e = a--
let f = int("40")
def setnum() ->  2
a += setnum() + 1 # expecting to 23
b -= setnum() - 1 # expecting to 29
c /= setnum() / 2 # expecting to 21.0
d *= setnum() * 2 # expecting to 124
e %= setnum() % 3 # expecting to 1
println(fm"a = %{a}, b = %{b}, c = %{c}, d = %{d}, e = %{e}")
let hello = "Hello"
let world = "World"
hello += " " + world
println(hello)

let count = 0
for i = 0 to 10:
    for j = 0 to 10:
        for k = 0 to 10:
            if i != j and i != k and j != k:
                count += 1
            end
        end
    end
end
println(fm"Count = %{count}") 

let number = 0
let sum = 0

while number <= 50:
    sum += number
    number += 1
end

println(fm"Sum = %{sum}") # Sum = 1275

let name = "David"
match name:
    case "David":
        println("Hello David")   
    end
    case "Kenny":
        println("Hello Kenny")   
    end
    default:
        println("Hello Stranger")   
    end 
     
end